package com.emp.security.services.impl;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.emp.security.domain.Employee;
import com.emp.security.proxy.EmployeeProxy;
import com.emp.security.proxy.LoginRequest;
import com.emp.security.proxy.LoginResponse;
import com.emp.security.repositories.EmpRepository;
import com.emp.security.services.EmpService;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class EmpServiceImpl implements EmpService{

	@Autowired
	private EmpRepository repository;
	
	@Autowired
	private ObjectMapper mapper;
	
	@Autowired
	private PasswordEncoder encoder;
	
	// saveData
	@Override
	public EmployeeProxy saveData(EmployeeProxy employeeProxy) {
		Employee employee = mapper.convertValue(employeeProxy, Employee.class);
		employee.setEmpId(UUID.randomUUID().toString());
		employee.setEmpPassword(encoder.encode(employeeProxy.getEmpPassword()));
		Employee savedEmployee = repository.save(employee);
		return mapper.convertValue(savedEmployee, EmployeeProxy.class);
	}

	// get Employee By id
	@Override
	public EmployeeProxy getById(String id) {
		
		Employee employee = repository.findById(id).orElseThrow(()-> new RuntimeException("Employee Not Found With Given ID !!"));
		return mapper.convertValue(employee, EmployeeProxy.class);
	}

	// get All Employee
	@Override
	public List<EmployeeProxy> getAll() {
		List<Employee> list = repository.findAll();
		return list.stream().map(obj->mapper.convertValue(obj, EmployeeProxy.class)).collect(Collectors.toList());
	}

	// update Employee
	@Override
	public EmployeeProxy updatedEmployee(String id, EmployeeProxy employeeProxy) {
		Employee employee = repository.findById(id).orElseThrow(()-> new RuntimeException("Employee Not Found With Given ID !!"));
		employee.setEmpName(employeeProxy.getEmpName());
		employee.setEmpRole(employeeProxy.getEmpRole());
		employee.setIsActive(employeeProxy.getIsActive());
		Employee updatedEmployee = repository.save(employee);
		return mapper.convertValue(updatedEmployee, EmployeeProxy.class);
	}

	// delete By Employee Id
	@Override
	public void deleteEmpById(String id) {
		Employee employee = repository.findById(id).orElseThrow(()-> new RuntimeException("Employee Not Found With Given ID !!"));
		repository.delete(employee);
	}

	// delete All Employee
	@Override
	public void deleteAllEmp() {
		repository.deleteAll();
	}

	@Override
	public LoginResponse login(LoginRequest request) {
		Employee employee = repository.findByEmpName(request.getUsername()).orElseThrow(()-> new RuntimeException("Data Not Found With Given Input !!"));
		return new LoginResponse(employee.getEmpName(), employee.getEmpPassword());
	}

}
