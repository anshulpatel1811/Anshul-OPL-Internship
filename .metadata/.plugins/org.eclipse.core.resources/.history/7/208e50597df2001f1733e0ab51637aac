package com.security.learn.services.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.security.learn.domain.Student;
import com.security.learn.repositories.StudentRepository;
import com.security.learn.services.StudentService;

@Service
public class StudentServiceImpl implements StudentService,UserDetailsService{

	@Autowired
	private StudentRepository repository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Override
	public List<Student> getAllStudents() {
		List<Student> list = repository.findAll();
		return list;
	}

	@Override
	public Student getStudentById(Long id) {
		Student student = repository.findById(id).orElseThrow(()->new RuntimeException("Student not found with give id !!"));
		return student;
	}

	@Override
	public Student saveStudent(Student student) {
		student.setPassword(passwordEncoder.encode(student.getPassword()));
		Student save = repository.save(student);
		return save;
	}

	@Override
	public Student updateStudent(Long id, Student student) {
		Student student1 = repository.findById(id).orElseThrow(()->new RuntimeException("Student not found with give id !!"));
		student1.setName(student.getName());
		student1.setAddress(student.getAddress());
		student1.setPassword(student.getPassword());
		student1.setPassword(passwordEncoder.encode(student.getPassword()));
		//student1.setRole(student.getRole());
		
		return repository.save(student1);
	}

	@Override
	public void deleteStudent(Long id) {
		repository.deleteById(id);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Student student = repository.findByName(username).orElseThrow(()->new RuntimeException("Student not found with give name !!"));
		return student;
	}

}
