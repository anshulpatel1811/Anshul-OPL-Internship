package com.security.learn.security;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtHelper {

	// validity
	// validity in millis
	public static final long TOKEN_VALIDITY = 5*60*60*1000;
	
	// secret key
	public static final String SECRET_KEY = "afadagagfhgjsfsgfwueifgahgfjsafgjhadluroadgsajkgfagkjg";
	
	// retrieve username from jwt token
	public String getUsernameFromToken(String token) {
		return getClaimFromToken(token, Claims::getSubject);
	}

	private <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = getAllClaimsFromToken(token);
		return claimsResolver.apply(claims);
	}

	// for retrieveing any information from token we will need the secret key
	private Claims getAllClaimsFromToken(String token) {
		//return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
		//return Jwts.parserBuilder().setSigningKey(SECRET_KEY).build().parseClaimsJws(token).getBody();
		return Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token).getBody();
	}

	private Key getSigningKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
	}
	
	// check if the token has exprired
	private Boolean isTokenExpired(String token) {
		final Date expiration = getExpirationDateFromToken(token);
		return expiration.before(new Date());
	}

	// retrieve expiration date from jwt token
	private Date getExpirationDateFromToken(String token) {
		return getClaimFromToken(token, Claims::getExpiration);
	}
	
//	// check if the token has exprired
//	private boolean isTokenExpired(String token) {
//        return extractExpiration(token).before(new Date());
//    }
//
//	// retrieve expiration date from jwt token
//    private Date extractExpiration(String token) {
//        return getClaimFromToken(token, Claims::getExpiration);
//    }
	
	// generate token for user
	public String generateToken(UserDetails userDetails) {
		Map<String, Object> claims = new HashMap<String, Object>();
		return doGenerateToken(claims,userDetails.getUsername());
	}

	private String doGenerateToken(Map<String, Object> claims, String subject) {
		
		return 
				Jwts.builder()
						.setClaims(claims).
						setSubject(subject).
						setIssuedAt(new Date(System.currentTimeMillis())).
						setExpiration(new Date(System.currentTimeMillis() + TOKEN_VALIDITY)).
						signWith(getSigningKey(), SignatureAlgorithm.HS512).compact();
	}
	
}
